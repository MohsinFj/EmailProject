/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ClientForms;

import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;

import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author Mohsin
 */
public class clientSendFileNew extends javax.swing.JFrame {

    /**
     * Creates new form clientSendFile
     */
//    String ip;
    String From_Name, From_department; // اسم المرسل والقسم
    HashMap toClient = new HashMap(); //اسم المستقبل والقسم
    String ip;

    public clientSendFileNew() {
        initComponents();
    }

    public clientSendFileNew(String ip, String name, String depatrment) {
        initComponents();

        this.From_Name = name;
        this.From_department = depatrment;
        this.ip = ip;

        lblWelcome.setText(name);

        try {

            Socket other = new Socket(ip, 9999);

            InputStream is = other.getInputStream();
            OutputStream out = other.getOutputStream();

            //جلب قسم الموضف من قاعدة البيانات
            ObjectOutputStream objectWriteSource = new ObjectOutputStream(out);
            objectWriteSource.writeObject(new Object[]{"getDepartmentName"});

            ObjectInputStream objectReadSource = new ObjectInputStream(is);

            ArrayList<String> info = (ArrayList<String>) objectReadSource.readObject();

            if (info.size() > 0) {

                cmbDepartment.addItem("");
                for (Object info1 : info) {
                    cmbDepartment.addItem(info1.toString());
                }
            }

            is.close();
            out.close();
            objectWriteSource.close();
            objectReadSource.close();
            other.close();

        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(clientFormNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pupMenu = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFileSend = new javax.swing.JList<>();
        btnFile = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblFileName = new javax.swing.JLabel();
        btnSend = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbDepartment = new javax.swing.JComboBox<>();
        lbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbClientName = new javax.swing.JComboBox<>();
        lblWelcome = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblNotify = new javax.swing.JLabel();
        lblNumNotify = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listClientName = new javax.swing.JList<>();

        pupMenu.setBorder(null);
        pupMenu.setBorderPainted(false);
        pupMenu.setPreferredSize(new java.awt.Dimension(215, 165));

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setPreferredSize(new java.awt.Dimension(215, 200));

        listFileSend.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listFileSend.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listFileSend.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listFileSend.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listFileSend.setFixedCellHeight(30);
        listFileSend.setFixedCellWidth(215);
        listFileSend.setPreferredSize(new java.awt.Dimension(215, 200));
        listFileSend.setVisibleRowCount(6);
        listFileSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listFileSendMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listFileSend);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFile.setText("الملف");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("اختيار الملف");

        lblFileName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblFileName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("القسم");

        cmbDepartment.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbDepartment.setFocusable(false);
        cmbDepartment.setRequestFocusEnabled(false);
        cmbDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDepartmentActionPerformed(evt);
            }
        });

        lbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl.setText(" مرحبا ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("اسم المستلم");

        cmbClientName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbClientName.setFocusable(false);
        cmbClientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClientNameActionPerformed(evt);
            }
        });

        lblWelcome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblWelcome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNotify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-notification-32.png"))); // NOI18N
        lblNotify.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblNotify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNotifyMouseClicked(evt);
            }
        });
        jPanel1.add(lblNotify, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblNumNotify.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNumNotify.setForeground(new java.awt.Color(204, 0, 0));
        lblNumNotify.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(lblNumNotify, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 20, 20));

        listClientName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listClientName.setFixedCellHeight(30);
        jScrollPane2.setViewportView(listClientName);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(227, 227, 227))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cmbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cmbClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFileName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(lblFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private File f;

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        int c = fileChooser.showOpenDialog(null);
        if (c == JFileChooser.APPROVE_OPTION) {
            f = fileChooser.getSelectedFile();

            lblFileName.setText(f.getName());
            try {
                String type = Files.probeContentType(f.toPath());
            } catch (IOException ex) {
                Logger.getLogger(clientSendFileNew.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnFileActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed

        try {
            String fileName = lblFileName.getText();
//            String ip = InetAddress.getLocalHost().getHostAddress();
            Socket other = new Socket(ip, 9999);

            InputStream is = other.getInputStream();
            OutputStream out = other.getOutputStream();

            FileInputStream fin = new FileInputStream(f);
            byte[] byteFile;
            byteFile = new byte[(int) f.length()];
            fin.read(byteFile);
            fin.close();

            ObjectOutputStream objectWriteSource = new ObjectOutputStream(out);
            Object data[] = {"sendFile", fileName, From_Name, From_department, toClient, byteFile};
            objectWriteSource.writeObject(data);
            objectWriteSource.flush();

            ObjectInputStream objectReadSource = new ObjectInputStream(is);
            String sendFileResult = objectReadSource.readUTF();
            JOptionPane.showMessageDialog(null, sendFileResult);

            objectReadSource.close();
            objectWriteSource.close();
            is.close();
            out.close();
            other.close();

        } catch (IOException e) {
            System.err.println(e.getMessage());
        }


    }//GEN-LAST:event_btnSendActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        pupMenu.add(listFileSend);
        getFile(ip);

        new Thread(new Runnable() {
            String ip;
            public Runnable init(String ip) {
                this.ip = ip;
                return this;
            }

            @Override
            public void run() {
                Timer timer = new Timer();
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        getFile(ip);
                    }
                }, 0, 5000);//wait 0 ms before doing the action and do it evry 1000ms (1second)
            }
        }.init(ip)).start();


    }//GEN-LAST:event_formWindowOpened

    //نخزن فيها اسم الملف ومصفوفة الملف المحولة الى بايت
    HashMap map = new HashMap();

    private void getFile(String ip) {
        String name = lblWelcome.getText();
        try {
            Socket other = new Socket(ip, 9999);
            InputStream is = other.getInputStream();
            OutputStream out = other.getOutputStream();

            ObjectOutputStream objectWriteSource = new ObjectOutputStream(out);
            objectWriteSource.writeObject(new Object[]{"getFile", name});
            objectWriteSource.flush();

            ObjectInputStream objectReadSource = new ObjectInputStream(is);
            ArrayList<String> filesName = (ArrayList<String>) objectReadSource.readObject();
            int size = filesName.size();
            if (size > 0) {

                lblNumNotify.setText(String.valueOf(size));
                DefaultListModel model = new DefaultListModel();

                for (int i = 0; i < size; i++) {

                    model.addElement(filesName.get(i));

                    byte fileByte[] = (byte[]) objectReadSource.readObject();

                    map.put(filesName.get(i), fileByte);

                }
                listFileSend.setModel(model);
            }

            is.close();
            out.close();
            objectWriteSource.close();
            objectReadSource.close();
            other.close();

        } catch (HeadlessException | IOException | ClassNotFoundException ex) {
            Logger.getLogger(clientFormNew.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void lblNotifyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNotifyMouseClicked

        pupMenu.show(lblNotify, lblNotify.getWidth(), 0);

    }//GEN-LAST:event_lblNotifyMouseClicked

    private void listFileSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listFileSendMouseClicked
        if (evt.getClickCount() == 2) {
            String fileNameSelected = listFileSend.getSelectedValue();

            if (map.containsKey(fileNameSelected)) {
                //key = fileName
                //value = fileByte
                String fileName = map.keySet().toArray()[listFileSend.getSelectedIndex()].toString();
                Object fileByte = map.get(fileName);

                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setSelectedFile(new File(fileName));
                int c = fileChooser.showSaveDialog(null);
                if (c == JFileChooser.APPROVE_OPTION) {
                    try {
                        File file = fileChooser.getSelectedFile();
                        if (file == null) {
                            return;
                        } else {
                            Socket other = new Socket(ip, 9999);
                            OutputStream out = other.getOutputStream();

                            //تحميل الملف المرسل من السيرفر
                            FileOutputStream fout = new FileOutputStream(file);
                            fout.write((byte[]) fileByte);
                            fout.close();

                            //تغير حالة الملف الى واحد يعني تم تحميل الملف من الكلاينت
                            ObjectOutputStream objectWriteSource = new ObjectOutputStream(out);
                            objectWriteSource.writeObject(new Object[]{"changeFileState", fileName});
                            objectWriteSource.flush();

                            objectWriteSource.close();
                            out.close();
                            other.close();

                            //مسح الملف من القائمة المعروضة
                            DefaultListModel model = (DefaultListModel) listFileSend.getModel();
                            model.removeElement(fileNameSelected);

                            int notify = Integer.valueOf(lblNumNotify.getText()) - 1;
                            if (notify == 0) {
                                lblNumNotify.setText("");
                            } else {
                                lblNumNotify.setText(String.valueOf(notify));
                            }
                        }
                    } catch (IOException e) {
                        Logger.getLogger(clientFormNew.class.getName()).log(Level.SEVERE, null, e);
                    }
                }
            }
        }
    }//GEN-LAST:event_listFileSendMouseClicked
    int lastIndexSelected = 0;
    private void cmbDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDepartmentActionPerformed
        int selectedIndex = cmbDepartment.getSelectedIndex();
        Object department = cmbDepartment.getSelectedItem();
        if (lastIndexSelected != selectedIndex) {
            if (!department.equals("")) {
                try {
                    Socket other = new Socket(ip, 9999);
                    OutputStream out = other.getOutputStream();
                    InputStream is = other.getInputStream();
                    //تغير حالة الملف الى واحد يعني تم تحميل الملف من الكلاينت
                    ObjectOutputStream objectWriteSource = new ObjectOutputStream(out);
                    objectWriteSource.writeObject(new Object[]{"getClientName", department, From_Name});

                    ObjectInputStream objectReadSource = new ObjectInputStream(is);
                    ArrayList<String> clientsName = (ArrayList<String>) objectReadSource.readObject();

                    cmbClientName.removeAllItems();
                    cmbClientName.addItem("");
                    if (clientsName.size() > 0) {
                        for (Object clients : clientsName) {
                            cmbClientName.addItem(clients.toString());
                        }
                    }

                    clientsName.clear();
                    objectReadSource.close();
                    objectWriteSource.close();
                    is.close();
                    out.close();
                    other.close();
                } catch (IOException | ClassNotFoundException e) {
                    Logger.getLogger(clientFormNew.class.getName()).log(Level.SEVERE, null, e);
                }
            }
            lastIndexSelected = selectedIndex;
        }
    }//GEN-LAST:event_cmbDepartmentActionPerformed

    DefaultListModel model = new DefaultListModel();

    private void cmbClientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClientNameActionPerformed
        if (cmbClientName.getItemCount() > 0) {
            Object toClientName = cmbClientName.getSelectedItem();
            if (!toClientName.equals("")) {
                ListModel listModel = listClientName.getModel();
                for (int i = 0; i < listModel.getSize(); i++) {
                    //هذا الشرط حتى لا يعرض اسم الموضف ضمن الموضفين المراد ارسال الملف لهم
                    if (toClientName == listModel.getElementAt(i)) {
                        return;
                    }
                }
                model.addElement(toClientName);
                listClientName.setModel(model);

                Object toClientDepartment = cmbDepartment.getSelectedItem();
                toClient.put(toClientName, toClientDepartment);
            }
        }
    }//GEN-LAST:event_cmbClientNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clientSendFileNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clientSendFileNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clientSendFileNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clientSendFileNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new clientSendFileNew().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> cmbClientName;
    private javax.swing.JComboBox<String> cmbDepartment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JLabel lblNotify;
    private javax.swing.JLabel lblNumNotify;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JList<String> listClientName;
    private javax.swing.JList<String> listFileSend;
    private javax.swing.JPopupMenu pupMenu;
    // End of variables declaration//GEN-END:variables
}
